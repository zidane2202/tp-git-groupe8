import 'dotenv/config';
import nodemailer from "nodemailer";
import { GoogleGenAI } from "@google/genai";
import { execSync } from "child_process";

// --- 1Ô∏è‚É£ R√©cup√©ration de l'√©tat du push ---
const status = process.argv[2] || "success";

// --- 2Ô∏è‚É£ R√©cup√©ration des adresses e-mails ---
let toEmails;
if (process.env.NOTIFY_EMAILS) {
  toEmails = process.env.NOTIFY_EMAILS;
} else {
  try {
    toEmails = execSync("git config user.email").toString().trim();
    console.log("üìß Adresse Git d√©tect√©e :", toEmails);
  } catch {
    toEmails = "ton.email@exemple.com";
    console.log("‚ö†Ô∏è Impossible de r√©cup√©rer l'e-mail Git, utilisation de l'e-mail par d√©faut :", toEmails);
  }
}

// --- 3Ô∏è‚É£ G√©n√©ration du mail via Gemini ---
const ai = new GoogleGenAI({});

async function generateMail(diffText) {
  const prompt = `
Tu es un assistant expert en d√©veloppement. G√©n√®re un mail professionnel bas√© sur le diff suivant :
1) Analyse le diff et indique si des erreurs ou bugs sont pr√©sents.
2) R√©dige un objet de mail clair.
3) R√©dige le corps du mail expliquant les probl√®mes et les corrections sugg√©r√©es.

Diff :
${diffText}
R√©ponds en fran√ßais, format : 
Objet : <objet du mail>
<texte du mail>
`;

  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: prompt,
  });

  return response.text;
}

// --- 4Ô∏è‚É£ Lecture du diff pour le rapport IA ---
let diffText = "Aucun diff disponible.";
try {
  diffText = execSync("git diff --cached").toString();
} catch {
  console.log("‚ö†Ô∏è Impossible de r√©cup√©rer le diff Git, mail g√©n√©rique sera envoy√©.");
}

// --- 5Ô∏è‚É£ G√©n√©ration du contenu mail ---
let aiMailContent;
try {
  aiMailContent = await generateMail(diffText);
} catch (err) {
  console.error("‚ùå Erreur g√©n√©ration mail IA :", err);
  aiMailContent = "Impossible de g√©n√©rer le contenu via l'IA.";
}

// --- 6Ô∏è‚É£ Pr√©paration du sujet et du corps du mail ---
let subject = status === "fail" ? "‚ùå Push bloqu√© - Analyse IA" : "‚úÖ Push valid√© - Analyse IA";
let body = aiMailContent;

// Si Gemini retourne "Objet : ..." on l'utilise
const objMatch = aiMailContent.match(/Objet\s*:\s*(.+)/i);
if (objMatch) subject = objMatch[1].trim();

// --- 7Ô∏è‚É£ Configuration du transporteur SMTP ---
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST || "smtp.gmail.com",
  port: process.env.SMTP_PORT ? parseInt(process.env.SMTP_PORT) : 587,
  secure: process.env.SMTP_SECURE === "true",
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

// --- 8Ô∏è‚É£ Pr√©paration et envoi du mail ---
const mailOptions = {
  from: `"Git AI Bot" <${process.env.SMTP_USER}>`,
  to: toEmails,
  subject,
  text: body,
};

try {
  await transporter.sendMail(mailOptions);
  console.log("üìß Mail envoy√© √†", toEmails);
} catch (err) {
  console.error("‚ùå Erreur envoi mail :", err);
}
