#!/bin/bash

# --- Hook pre-push pour bloquer le push si des erreurs d√©tect√©es ---
# Compatible Windows / Linux / macOS

# D√©tection automatique du bon ex√©cutable Python
if command -v python3 &>/dev/null; then
    PYTHON_CMD="python3"
elif command -v python &>/dev/null; then
    PYTHON_CMD="python"
else
    echo "‚ùå Erreur : Python n'est pas install√© ou non reconnu dans le PATH."
    echo "Veuillez installer Python et l'ajouter au PATH avant de pousser votre code."
    exit 1
fi

# D√©termination du chemin absolu du script Python
# (peu importe o√π tu ex√©cutes la commande git)
REPO_ROOT=$(git rev-parse --show-toplevel)
SCRIPT_PATH="$REPO_ROOT/scripts/review_mailer.py"

# V√©rification que le script existe
if [ ! -f "$SCRIPT_PATH" ]; then
    echo "‚ùå Erreur : Script introuvable √† l'emplacement $SCRIPT_PATH"
    exit 1
fi

# R√©cup√©ration de l'adresse email de l'auteur du dernier commit
RECIPIENT_EMAIL=$(git log -1 --pretty=format:'%ae')

# R√©cup√©ration des fichiers modifi√©s pour ce push
CHANGED_FILES=$(git diff --cached --name-only | paste -sd "," -)

if [ -z "$CHANGED_FILES" ]; then
    echo "Aucun fichier modifi√© √† v√©rifier."
    exit 0
fi

echo "üîç Analyse de code avant le push..."
echo "üì® Envoi du rapport √† : $RECIPIENT_EMAIL"
echo "üìÇ Fichiers concern√©s : $CHANGED_FILES"
echo "---------------------------------------"

# Ex√©cution du script Python d'analyse et d'envoi de mail
"$PYTHON_CMD" "$SCRIPT_PATH" "$RECIPIENT_EMAIL" "$CHANGED_FILES"
EXIT_CODE=$?

# Si des erreurs sont d√©tect√©es, on bloque le push
if [ $EXIT_CODE -ne 0 ]; then
    echo "üö´ Push annul√© : des erreurs de code ont √©t√© d√©tect√©es."
    echo "üíå Un email de rapport a √©t√© envoy√© √† $RECIPIENT_EMAIL"
    exit 1
fi

echo "‚úÖ Analyse termin√©e : aucun probl√®me d√©tect√©. Push autoris√©."
exit 0
